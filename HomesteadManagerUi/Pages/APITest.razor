@page "/apitest"
@using HomesteadManagerUi.Services
@inject NavigationManager _nav
@inject ApiService api

<h3>APITest</h3>

<div>
@if (String.IsNullOrEmpty(message))
{
    <p>Loading...</p>
}
else
{
    <p>@message</p>
}
</div>

<div>
    Enter your zip code to retrieve a list of plants you can grow.
</div>
<div>
    @if(!string.IsNullOrEmpty(inputError))
    {
        <div class="validation-message">@inputError</div>
    }
    <MudInput T="String" Value="zipCode" ValueChanged="(value) => zipCode= value " FullWidth="false" Variant="Variant.Filled" Placeholder="Zip Code (Required)" />
</div>
<div>
    <MudButton Variant="Variant.Filled" Color="@Color.Primary" OnClick="()=> GetPlants()">Get Plants</MudButton>
</div>

<div>
    @if (!string.IsNullOrEmpty(inputError))
    {
        <div class="validation-message">@outputMessage</div>
    }

    @if(Plants == null)
    {
        <div>Loading Plant Data...</div>
    }
    else if (Plants.Count == 0)
    {
        <div>No Plant data returned.</div>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Zone</th>
                    <th>Common Name</th>
                    <th>Sowing Method</th>
                    <th>Optimal Sowing Dates</th>
                    <th>Zone Specific Notes</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var plant in Plants)
                {
                    <tr>
                        <td>@plant.ZoneID</td>
                        <td>@plant.Plant.CommonName</td>
                        <td>@plant.SowingMethod</td>
                        <td>@plant.OptimalSowingPeriodStart to @plant.OptimalSowingPeriodEnd</td>
                        <td>@plant.ZoneSpecificNotes</td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>
    @if (loading)
    {
        <div class="loading-progress">Getting data from the API...</div>
    }

@code {
    private string message = "";
    private string inputError = "";
    private string outputMessage = "";
    private string zipCode = "";
    private List<PlantZoneInfo> Plants;
    private bool loading = false;

    protected override async Task OnInitializedAsync()
    {
        message = await api.GetHelloWorld();
    }

    private async void GetPlants()
    {
        try
        {

            loading = true;
            inputError = "";
            if (string.IsNullOrWhiteSpace(zipCode))
            {
                inputError = "Zip code is required.";
                return;
            }

            Plants = await api.GetPlants(zipCode);
        }
        finally
        {
            if (Plants == null || Plants.Count == 0)
            {
                outputMessage = "Plants were not returned.";    
            }
            else
            {
                outputMessage = "We have plants!";
            }

            loading = false;
            
        }
    }
}
