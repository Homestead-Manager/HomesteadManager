@page "/apitest"
@using HomesteadManagerUi.Services
@inject NavigationManager _nav
@inject ApiService api

<h3>APITest</h3>

<div>
@if (String.IsNullOrEmpty(message))
{
    <MudText>Loading...</MudText>
}
else
{
    <MudText>API Status: @message</MudText>
}
</div>

<MudText>
    Enter your zip code to retrieve a list of plants you can grow in your area.
</MudText>
<div>
    @if(!string.IsNullOrEmpty(inputError))
    {
        <MudText class="@errorMessageClass">@inputError</MudText>
    }
    <MudInput T="String" Value="zipCode" ValueChanged="(value) => zipCode= value " FullWidth="false" Variant="Variant.Filled" Placeholder="Zip Code (Required)" />
</div>
<div>
    <MudButton Variant="Variant.Filled" Color="@Color.Primary" OnClick="()=> GetPlants()">Get Plants</MudButton>
</div>

<div>
    @if (!string.IsNullOrEmpty(outputMessage))
    {
        <MudText class="@outputMessageClass">@outputMessage</MudText>
    }

    @if (!string.IsNullOrEmpty(loadMessage))
    {
        <MudText>@loadMessage</MudText>
    }

    @if (!string.IsNullOrEmpty(loadErrorMessage))
    {
        <MudText class="@errorMessageClass">@loadErrorMessage</MudText>
    }

    @if (Plants != null && Plants.Count > 0)
    {
        <MudTable Items="Plants">
            <HeaderContent>
                <MudTh>Zone</MudTh>
                <MudTh>Common Name</MudTh>
                <MudTh>Sowing Method</MudTh>
                <MudTh>Optimal Sowing Dates</MudTh>
                <MudTh>Zone Specific Notes</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.ZoneID</MudTd>
                <MudTd>@context.Plant.CommonName</MudTd>
                <MudTd>@context.SowingMethod</MudTd>
                <MudTd>@context.OptimalSowingPeriod</MudTd>
                <MudTd>@context.ZoneSpecificNotes</MudTd>
            </RowTemplate>
        </MudTable>
    }
</div>
    @if (loading)
    {
    <div class="lds-ring"><div></div><div></div><div></div><div></div></div>
    }

@code {
    private string message = "";
    private string inputError = "";
    private string outputMessage = "";
    private string outputMessageClass = "";
    private string loadErrorMessage = "";
    private string loadErrorMessageClass = "";
    private string loadMessage = "";
    private string errorMessageClass = "validation-message";
    private string zipCode = "";
    private List<PlantZoneInfo> Plants = new();
    private bool loading = false;

    protected override async Task OnInitializedAsync()
    {
        message = await api.GetHealthcheck();
    }

    private async Task GetPlants()
    {
        try
        {
            loading = true;
            inputError = "";
            outputMessage = "";
            outputMessageClass = "";
            loadMessage = "Loading Plant Data...";

            if (string.IsNullOrWhiteSpace(zipCode))
            {
                inputError = "Zip code is required.";
                return;
            }

            Plants = await api.GetPlants(zipCode);
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex.Message);
            loadErrorMessage = "Error loading plants. Please try again later.";
        }
        finally
        {
            if (Plants == null || Plants.Count == 0)
            {
                outputMessage = "Plants were not returned.";
                outputMessageClass = errorMessageClass;
            }
            else
            {
                outputMessage = "We have plants!";
                outputMessageClass = "";
            }

            loadMessage = "";
            loading = false;
        }
    }
}
