@page "/"
@inject NavigationManager _nav
@inject HttpClient Http
<style>
    .wizard-steps-container {
        padding: 8px;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .wizard-header {
        color: #5E8C61;
        text-align: center;
        /* Heading 1 */
        font-family: Lora;
        font-size: 32px;
        font-style: normal;
        font-weight: 700;
        line-height: normal;
    }

    .wizard-text {
        padding-top: 16px;
        display: flex;
    }

    .wizard-selection-label {
        color: var(--Leafy-Green, #5E8C61);
        /* Label */
        font-family: Montserrat;
        font-size: 16px;
        font-style: normal;
        font-weight: 700;
        line-height: normal;
    }

    .step1-inputs {
        margin-top: 32px;
        display: flex;
        flex-direction: column;
    }

    .step2-inputs {
        margin-top: 32px;
        display: flex;
        flex-direction: column;
    }

    .step3-inputs {
        margin-top: 32px;
        display: flex;
        flex-direction: column;
    }

    .wizard-checkbox-options{
        display: flex;
        flex-wrap: wrap;
    }

        .wizard-checkbox-options .mud-input-control-boolean-input {
            flex: 1 1 50%; /* Grow and shrink equally, base width 50% */
            box-sizing: border-box; /* Include padding and border in the element's width */
            padding: 5px;
    }

    .wizard-next {
    }
</style>
<PageTitle>Wizard</PageTitle>


<div class="wizard-steps-container">
    <span>
        <svg width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
            <circle id="Ellipse 1" cx="16" cy="16" r="16" fill="@GetStepColor(WizardStep.Step1)" />
            <text x="16" y="18" font-family="Lora" font-size="20" fill="white" text-anchor="middle" dominant-baseline="middle">1</text>
        </svg>
    </span>
    <span>
        <svg width="38" height="4" viewBox="0 0 38 4" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path id="Line 1" d="M0 2L37.4833 2" stroke="#5E8C61" stroke-opacity="0.5" stroke-width="3" />
        </svg>
    </span>
    <span>
        <svg width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
            <circle id="Ellipse 2" cx="16" cy="16" r="16" fill="@GetStepColor(WizardStep.Step2)" />
            <text x="16" y="18" font-family="Lora" font-size="20" fill="white" text-anchor="middle" dominant-baseline="middle">2</text>
        </svg>
    </span>
    <span>
        <svg width="38" height="4" viewBox="0 0 38 4" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path id="Line 2" d="M0 2L37.4833 2" stroke="#5E8C61" stroke-opacity="0.5" stroke-width="3" />
        </svg>
    </span>
    <span>
        <svg width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
            <circle id="Ellipse 3" cx="16" cy="16" r="16" fill="@GetStepColor(WizardStep.Step3)" />
            <text x="16" y="18" font-family="Lora" font-size="20" fill="white" text-anchor="middle" dominant-baseline="middle">3</text>
        </svg>
    </span>
    <span>
        <svg width="38" height="4" viewBox="0 0 38 4" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path id="Line 3" d="M0 2L37.4833 2" stroke="#5E8C61" stroke-opacity="0.5" stroke-width="3" />
        </svg>
    </span>
    <span>
        <svg width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
            <circle id="Ellipse 4" cx="16" cy="16" r="16" fill="@GetStepColor(WizardStep.Step4)" />
            <text x="16" y="18" font-family="Lora" font-size="20" fill="white" text-anchor="middle" dominant-baseline="middle">4</text>
        </svg>
    </span>
    <span>
        <svg width="38" height="4" viewBox="0 0 38 4" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path id="Line 4" d="M0 2L37.4833 2" stroke="#5E8C61" stroke-opacity="0.5" stroke-width="3" />
        </svg>
    </span>
    <span>

        <svg width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
            <circle id="Ellipse 5" cx="16" cy="16" r="16" fill="@GetStepColor(WizardStep.Step5)" />
            <text x="16" y="18" font-family="Lora" font-size="20" fill="white" text-anchor="middle" dominant-baseline="middle">5</text>
        </svg>
    </span>
</div>

@if (currentStep == WizardStep.Step1)
{
    <div>
        <h1 class="wizard-header">Create Account</h1>

        <div class="wizard-text">
            Let's lay the groundwork for your digital homestead. Secure your account by providing an email address and creating a strong password. This will be your key to unlocking a world of personalized homesteading management at your fingertips.
        </div>

        <div class="step1-inputs">

            <MudInput T="String" Value="Email" ValueChanged="(value) => Email = value" FullWidth="false" Variant="Variant.Filled" Placeholder="Email" InputType="InputType.Email" />
            <MudInput T="String" Value="Password" ValueChanged="(value) => Password = value " FullWidth="false" Variant="Variant.Filled" Placeholder="Password" InputType="InputType.Password" />
        </div>
        <div class="wizard-text">
            Ready to grow? Hit 'Next' to plant the seeds of your homestead's future.
        </div>

        <div class="wizard-next">
            <MudButton Disabled="@ShouldPreventNext(currentStep)" Variant="Variant.Filled" OnClick="()=> Next()">Next</MudButton>
        </div>
    </div>
}

@if (currentStep == WizardStep.Step2)
{
    <div>
        <h1 class="wizard-header">Setting the Scene</h1>
        <div class="wizard-text">
            Before we dive into the greenery of your homestead, let's pinpoint your patch of paradise. Your location helps us provide climate-specific advice. Rest assured, your homestead's whereabouts are strictly for our eyes onlyâ€”your privacy is as important as fertile soil to us. Only your Zip Code is required, but the more information you provide, the closer we can pinpoint your exact growing zone and climate.
        </div>

        <div class="step2-inputs">
            <MudInput T="String" Value="Address" ValueChanged="(value) => Address= value" FullWidth="false" Variant="Variant.Filled" Placeholder="Address (Optional)" />
            <MudInput T="String" Value="City" ValueChanged="(value) => City= value " FullWidth="false" Variant="Variant.Filled" Placeholder="City (Optional)" />
            <MudInput T="String" Value="State" ValueChanged="(value) => State= value " FullWidth="false" Variant="Variant.Filled" Placeholder="State (Optional)" />
            <MudInput T="String" Value="Zip" ValueChanged="(value) => Zip= value " FullWidth="false" Variant="Variant.Filled" Placeholder="Zip Code (Required)" />
        </div>
        <div class="wizard-next">
            <MudButton Variant="Variant.Filled" Disabled="@ShouldPreventNext(currentStep)" OnClick="()=> Next()">Next</MudButton>
        </div>
    </div>
}

@if (currentStep == WizardStep.Step3)
{
    <div>
        <h1 class="wizard-header">Mapping Your Terrain</h1>

        <div class="wizard-text">
            Understanding the lay of your land helps us suggest the best use of your space. Whether you have vast pastures or a cozy backyard, every inch counts. Share your homestead's size and landscape, and we'll help you maximize every square foot.
        </div>
        <div class="step3-inputs">
            <MudInput T="Decimal?" Value="TotalAcreage" ValueChanged="(value) => TotalAcreage= value " FullWidth="false" Variant="Variant.Filled" Placeholder="Total Acreage" />
        </div>
        <div class="wizard-selection-label">Terrain Features:</div>
        <div class="wizard-checkbox-options">

            @foreach (var feature in AvailableTerrainFeatures)
            {
                <MudCheckBox T="bool" Label="@feature"
                             Value="SelectedTerrainFeatures.Contains(feature)"
                             ValueChanged="() => TerrainFeaturesCheckboxChanged(feature)" />
            }
        </div>
        <div class="wizard-selection-label">Primary Soil Type:</div>
        <div class="wizard-checkbox-options">

            @foreach (var soilType in AvailablePrimarySoilTypes)
            {
                <MudCheckBox T="bool" Label="@soilType"
                             Value="SelectedPrimarySoilTypes.Contains(soilType)"
                             ValueChanged="() => PrimarySoilTypesCheckboxChanged(soilType)" />
            }
        </div>
        <div class="wizard-next">
            <MudButton Variant="Variant.Filled" Disabled="@ShouldPreventNext(currentStep)" OnClick="()=> Next()">Next</MudButton>
        </div>
    </div>
}

@if (currentStep == WizardStep.Step4)
{
    <div>
        <h1 class="wizard-header">Cultivating Your Passions</h1>
        <div class="wizard-next">
            <MudButton Variant="Variant.Filled" OnClick="()=> Next()">Next</MudButton>
        </div>
    </div>
}

@if (currentStep == WizardStep.Step5)
{
    <div>
        <h1 class="wizard-header">Preparing the Soil for Success</h1>
        <div class="wizard-next">
            <MudButton Variant="Variant.Filled" OnClick="()=> Next()">Next</MudButton>
        </div>
    </div>
}

@if (currentStep == WizardStep.Step6)
{
    <div>
        <h1 class="wizard-header">Welcome to Your Homestead Journey!</h1>
    </div>
}

@code {
    string? Email;
    string? Password;

    string? Address;
    string? City;
    string? State;
    string? Zip;

    decimal? TotalAcreage;

    List<string> AvailableTerrainFeatures = new List<string> { "Wooded Area", "Pasture", "Tillable Land", "Pond", "River/Stream", "Wetland/Marsh" };
    List<string> SelectedTerrainFeatures = new List<string>();

    List<string> AvailablePrimarySoilTypes = new List<string> { "Sandy", "Peaty", "Clay", "Loamy", "Silty", "Chalky", "Saline", "Rocky" };
    List<string> SelectedPrimarySoilTypes = new List<string>();


    enum WizardStep
    {
        Step1,
        Step2,
        Step3,
        Step4,
        Step5,
        Step6
    }

    WizardStep currentStep = WizardStep.Step1;

    string GetStepColor(WizardStep step)
    {
        var green = "#5E8C61";
        var red = "#E57F84";

        if (step == WizardStep.Step6)
        {
            return green;
        }


        return step == currentStep ? red : green;
    }

    bool ShouldPreventNext(WizardStep step)
    {
        if (step == WizardStep.Step1)
        {
            if (string.IsNullOrWhiteSpace(Email) || string.IsNullOrWhiteSpace(Password))
            {
                return true;
            }
            if (!Email.Contains("@") || !Email.Contains("."))
            {
                return true;
            }
        }

        if (step == WizardStep.Step2)
        {
            if (string.IsNullOrWhiteSpace(Zip))
            {
                return true;
            }
        }

        if (step == WizardStep.Step3)
        {
            if (TotalAcreage == null || TotalAcreage == 0)
            {
                return true;
            }

            if (SelectedTerrainFeatures.Count == 0)
            {
                return true;
            }

            if (SelectedPrimarySoilTypes.Count == 0)
            {
                return true;
            }
        }

        return false;
    }

    void Next()
    {
        currentStep = (WizardStep)((int)currentStep + 1);
    }


    private void TerrainFeaturesCheckboxChanged(string feature)
    {
        if (SelectedTerrainFeatures.Contains(feature))
        {
            SelectedTerrainFeatures.Remove(feature);
        }
        else
        {
            SelectedTerrainFeatures.Add(feature);
        }
    }


    private void PrimarySoilTypesCheckboxChanged(string soilType)
    {
        if (SelectedPrimarySoilTypes.Contains(soilType))
        {
            SelectedPrimarySoilTypes.Remove(soilType);
        }
        else
        {
            SelectedPrimarySoilTypes.Add(soilType);
        }
    }

}
